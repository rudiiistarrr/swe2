/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KundenPanel.java
 *
 * Created on Mar 3, 2011, 11:14:24 PM
 */
package GUI;

import DAO.DAOFactory;
import DAO.KundenDAO;
import Entities.Kunde;
import java.util.ArrayList;
import javax.swing.RowFilter;
import javax.swing.RowFilter.Entry;
import javax.swing.event.TableModelEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author georg
 */
public class KundenPanel extends javax.swing.JPanel {

    dataModel dataModel = new dataModel();
    private ArrayList<Kunde> kunden;
    RowFilter<Object, Object> filter = new RowFilter<Object, Object>() {
        public boolean include(Entry entry) {
            for(int i = 0; i < entry.getValueCount(); i++){
                if(i % 2 == 0)
                    return true;
                else
                    return false;
            }
            return false;
        }
    };

    private class dataModel extends AbstractTableModel {

        public dataModel() {
            DAOFactory df = DAOFactory.getDAOFactory(DAOFactory.DERBY);
            KundenDAO kd = df.getKundenDAO();
            kunden = kd.getKunden();
        }

        public int getRowCount() {
            return kunden.size();
        }

        public int getColumnCount() {
            return 2;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            Kunde k = kunden.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return k.getID() == -1 ? "neu" : k.getID();
                case 1:
                    return k.getName();
                default:
                    return 0;
            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "ID";
                case 1:
                    return "Name";
                default:
                    return "nooooooo!";
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return false;
            }
            return true;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            Kunde k = kunden.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    break;
                case 1:
                    k.setName((String) aValue);
                    break;
                default:
                    break;
            }
        }

        public void addRow() {
            int rowIndex = kunden.size();
            kunden.add(new Kunde(-1, ""));
            fireTableChanged(new TableModelEvent(this, rowIndex, rowIndex, -1, TableModelEvent.INSERT));
        }
    }

    dataModel a = new dataModel();
    TableRowSorter<TableModel>  sorter = new TableRowSorter<TableModel>(a);

    /** Creates new form KundenPanel */
    public KundenPanel() {
        initComponents();
        DefaultTableModel x;
        jTable1.setRowSorter(sorter);
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tbfilter = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(dataModel);
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        tbfilter.setMinimumSize(new java.awt.Dimension(10, 80));
        tbfilter.setPreferredSize(new java.awt.Dimension(100, 28));
        tbfilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbfilterKeyReleased(evt);
            }
        });
        add(tbfilter, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void tbfilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbfilterKeyReleased
        String text = tbfilter.getText();
        Integer size = text.length();
        if(text.length() == 0)
             sorter.setRowFilter(null);
        else
            sorter.setRowFilter(RowFilter.regexFilter(text,1));
    }//GEN-LAST:event_tbfilterKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tbfilter;
    // End of variables declaration//GEN-END:variables
}
